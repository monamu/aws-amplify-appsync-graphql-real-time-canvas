{"version":3,"sources":["RCD.js","drawImage.js","graphql/mutations.js","Canvas.js","graphql/subscriptions.js","serviceWorker.js","aws-exports.js","index.js"],"names":["midPointBtw","p1","p2","x","y","canvasStyle","display","position","canvasTypes","name","zIndex","_default","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentWillUnmount","canvasObserver","unobserve","canvasContainer","drawImage","imgSrc","image","Image","src","onload","_ref","arguments","length","undefined","ctx","img","w","h","offsetX","offsetY","canvas","width","height","cx","cy","cw","ch","iw","ih","r","Math","min","nw","nh","ar","abs","grid","undo","lines","slice","clear","simulateDrawingLines","immediate","getSaveData","JSON","stringify","canvasWidth","canvasHeight","loadSaveData","saveData","immediateLoading","Error","_JSON$parse","parse","push","scaleX","scaleY","scaleAvg","map","line","objectSpread","points","p","brushRadius","curTime","timeoutGap","loadTimeOffset","forEach","brushColor","_loop","i","window","setTimeout","drawPoints","saveLine","handleTouchStart","e","_this$getPointerPos","getPointerPos","lazy","update","both","handleMouseDown","mouseHasMoved","handleTouchMove","preventDefault","_this$getPointerPos2","handlePointerMove","handleTouchEnd","handleMouseUp","brush","getBrushCoordinates","isPressing","handleMouseMove","_this$getPointerPos3","isDrawing","handleCanvasResize","entries","observer","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","_entry$contentRect","value","contentRect","setCanvasSize","interface","drawing","temp","drawGrid","loop","once","err","return","style","rect","getBoundingClientRect","clientX","clientY","changedTouches","left","top","disabled","hasChanged","isDisabled","isEnabled","toObject","brushHasMoved","_ref2","lineJoin","lineCap","strokeStyle","clearRect","lineWidth","moveTo","beginPath","len","midPoint","quadraticCurveTo","lineTo","stroke","saveLine2","data","console","log","_ref3","toConsumableArray","valuesChanged","_ref4$once","pointer","getPointerCoordinates","drawInterface","requestAnimationFrame","hideGrid","setLineDash","gridColor","countX","countY","fillStyle","arc","PI","fill","catenaryColor","catenary","drawToCanvas","chainLength","Catenary","_this2","LazyBrush","radius","lazyRadius","devicePixelRatio","enabled","initialPoint","innerWidth","innerHeight","ResizeObserver","observe","initX","initY","prevProps","setRadius","_this3","react_default","a","createElement","className","background","touchAction","ref","container","_ref5","isInterface","key","getContext","onMouseDown","onMouseMove","onMouseUp","onMouseOut","onTouchStart","onTouchMove","onTouchEnd","onTouchCancel","PureComponent","defaultProps","updateCanvas","colors","rand","random","Demo","state","lineLength","id","clientId","uuid","canvasInfo","parsedData","newData","newCanvas","API","graphql","graphqlOperation","input","then","c","catch","d","errors","addEventListener","target","setState","subscribe","onUpdateCanvas","Number","last","onClick","RCD_default","assign","Component","Boolean","location","hostname","match","awsmobile","aws_project_region","aws_appsync_graphqlEndpoint","aws_appsync_region","aws_appsync_authenticationType","aws_appsync_apiKey","Amplify","configure","config","ReactDOM","render","Canvas","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.10040de2.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { LazyBrush } from \"lazy-brush\";\nimport { Catenary } from \"catenary-curve\";\n\nimport ResizeObserver from \"resize-observer-polyfill\";\n\nimport drawImage from \"./drawImage\";\n\nfunction midPointBtw(p1, p2) {\n  return {\n    x: p1.x + (p2.x - p1.x) / 2,\n    y: p1.y + (p2.y - p1.y) / 2\n  };\n}\n\nconst canvasStyle = {\n  display: \"block\",\n  position: \"absolute\"\n};\n\nconst canvasTypes = [\n  {\n    name: \"interface\",\n    zIndex: 15\n  },\n  {\n    name: \"drawing\",\n    zIndex: 11\n  },\n  {\n    name: \"temp\",\n    zIndex: 12\n  },\n  {\n    name: \"grid\",\n    zIndex: 10\n  }\n];\n\nexport default class extends PureComponent {\n  static propTypes = {\n    loadTimeOffset: PropTypes.number,\n    lazyRadius: PropTypes.number,\n    brushRadius: PropTypes.number,\n    brushColor: PropTypes.string,\n    catenaryColor: PropTypes.string,\n    gridColor: PropTypes.string,\n    hideGrid: PropTypes.bool,\n    canvasWidth: PropTypes.number,\n    canvasHeight: PropTypes.number,\n    disabled: PropTypes.bool,\n    imgSrc: PropTypes.string,\n    saveData: PropTypes.string,\n    immediateLoading: PropTypes.bool\n  };\n\n  static defaultProps = {\n    loadTimeOffset: 5,\n    lazyRadius: 12,\n    brushRadius: 10,\n    brushColor: \"#444\",\n    catenaryColor: \"#0a0302\",\n    gridColor: \"rgba(150,150,150,0.17)\",\n    hideGrid: false,\n    canvasWidth: 400,\n    canvasHeight: 400,\n    disabled: false,\n    imgSrc: \"\",\n    saveData: \"\",\n    immediateLoading: false\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.canvas = {};\n    this.ctx = {};\n\n    this.catenary = new Catenary();\n\n    this.points = [];\n    this.lines = [];\n\n    this.mouseHasMoved = true;\n    this.valuesChanged = true;\n    this.isDrawing = false;\n    this.isPressing = false;\n  }\n\n  componentDidMount() {\n    this.lazy = new LazyBrush({\n      radius: this.props.lazyRadius * window.devicePixelRatio,\n      enabled: true,\n      initialPoint: {\n        x: window.innerWidth / 2,\n        y: window.innerHeight / 2\n      }\n    });\n    this.chainLength = this.props.lazyRadius * window.devicePixelRatio;\n\n    this.canvasObserver = new ResizeObserver((entries, observer) =>\n      this.handleCanvasResize(entries, observer)\n    );\n    this.canvasObserver.observe(this.canvasContainer);\n\n    this.drawImage();\n    this.loop();\n\n    window.setTimeout(() => {\n      const initX = window.innerWidth / 2;\n      const initY = window.innerHeight / 2;\n      this.lazy.update(\n        { x: initX - this.chainLength / 4, y: initY },\n        { both: true }\n      );\n      this.lazy.update(\n        { x: initX + this.chainLength / 4, y: initY },\n        { both: false }\n      );\n      this.mouseHasMoved = true;\n      this.valuesChanged = true;\n      this.clear();\n\n      // Load saveData from prop if it exists\n      if (this.props.saveData) {\n        this.loadSaveData(this.props.saveData);\n      }\n    }, 100);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.lazyRadius !== this.props.lazyRadius) {\n      // Set new lazyRadius values\n      this.chainLength = this.props.lazyRadius * window.devicePixelRatio;\n      this.lazy.setRadius(this.props.lazyRadius * window.devicePixelRatio);\n    }\n\n    if (prevProps.saveData !== this.props.saveData) {\n      this.loadSaveData(this.props.saveData);\n    }\n\n    if (JSON.stringify(prevProps) !== JSON.stringify(this.props)) {\n      // Signal this.loop function that values changed\n      this.valuesChanged = true;\n    }\n  }\n\n  componentWillUnmount = () => {\n    this.canvasObserver.unobserve(this.canvasContainer);\n  };\n\n  drawImage = () => {\n    if (!this.props.imgSrc) return;\n\n    // Load the image\n    this.image = new Image();\n    this.image.src = this.props.imgSrc;\n\n    // Draw the image once loaded\n    this.image.onload = () =>\n      drawImage({ ctx: this.ctx.grid, img: this.image });\n  };\n\n  undo = () => {\n    const lines = this.lines.slice(0, -1);\n    this.clear();\n    this.simulateDrawingLines({ lines, immediate: true });\n  };\n\n  getSaveData = () => {\n    // Construct and return the stringified saveData object\n    return JSON.stringify({\n      lines: this.lines,\n      width: this.props.canvasWidth,\n      height: this.props.canvasHeight\n    });\n  };\n\n  loadSaveData = (saveData, immediate = this.props.immediateLoading) => {\n    if (typeof saveData !== \"string\") {\n      throw new Error(\"saveData needs to be of type string!\");\n    }\n\n    const { lines, width, height } = JSON.parse(saveData);\n\n    if (!lines || typeof lines.push !== \"function\") {\n      throw new Error(\"saveData.lines needs to be an array!\");\n    }\n\n    this.clear();\n\n    if (\n      width === this.props.canvasWidth &&\n      height === this.props.canvasHeight\n    ) {\n      this.simulateDrawingLines({\n        lines,\n        immediate\n      });\n    } else {\n      // we need to rescale the lines based on saved & current dimensions\n      const scaleX = this.props.canvasWidth / width;\n      const scaleY = this.props.canvasHeight / height;\n      const scaleAvg = (scaleX + scaleY) / 2;\n\n      this.simulateDrawingLines({\n        lines: lines.map(line => ({\n          ...line,\n          points: line.points.map(p => ({\n            x: p.x * scaleX,\n            y: p.y * scaleY\n          })),\n          brushRadius: line.brushRadius * scaleAvg\n        })),\n        immediate\n      });\n    }\n  };\n\n  simulateDrawingLines = ({ lines, immediate }) => {\n    // Simulate live-drawing of the loaded lines\n    // TODO use a generator\n    let curTime = 0;\n    let timeoutGap = immediate ? 0 : this.props.loadTimeOffset;\n\n    lines.forEach(line => {\n      const { points, brushColor, brushRadius } = line;\n\n      for (let i = 1; i < points.length; i++) {\n        curTime += timeoutGap;\n        window.setTimeout(() => {\n          this.drawPoints({\n            points: points.slice(0, i + 1),\n            brushColor,\n            brushRadius\n          });\n        }, curTime);\n      }\n\n      curTime += timeoutGap;\n      window.setTimeout(() => {\n        // Save this line with its props instead of this.props\n        this.points = points;\n        this.saveLine({ brushColor, brushRadius });\n      }, curTime);\n    });\n  };\n\n  handleTouchStart = e => {\n    const { x, y } = this.getPointerPos(e);\n    this.lazy.update({ x, y }, { both: true });\n    this.handleMouseDown(e);\n\n    this.mouseHasMoved = true;\n  };\n\n  handleTouchMove = e => {\n    e.preventDefault();\n    const { x, y } = this.getPointerPos(e);\n    this.handlePointerMove(x, y);\n  };\n\n  handleTouchEnd = e => {\n    this.handleMouseUp(e);\n    const brush = this.lazy.getBrushCoordinates();\n    this.lazy.update({ x: brush.x, y: brush.y }, { both: true });\n    this.mouseHasMoved = true;\n  };\n\n  handleMouseDown = e => {\n    e.preventDefault();\n    this.isPressing = true;\n  };\n\n  handleMouseMove = e => {\n    const { x, y } = this.getPointerPos(e);\n    this.handlePointerMove(x, y);\n  };\n\n  handleMouseUp = e => {\n    e.preventDefault();\n    this.isDrawing = false;\n    this.isPressing = false;\n\n    this.saveLine();\n  };\n\n  handleCanvasResize = (entries, observer) => {\n    const saveData = this.getSaveData();\n    for (const entry of entries) {\n      const { width, height } = entry.contentRect;\n      this.setCanvasSize(this.canvas.interface, width, height);\n      this.setCanvasSize(this.canvas.drawing, width, height);\n      this.setCanvasSize(this.canvas.temp, width, height);\n      this.setCanvasSize(this.canvas.grid, width, height);\n\n      this.drawGrid(this.ctx.grid);\n      this.loop({ once: true });\n    }\n    this.loadSaveData(saveData, true);\n  };\n\n  setCanvasSize = (canvas, width, height) => {\n    canvas.width = width;\n    canvas.height = height;\n    canvas.style.width = width;\n    canvas.style.height = height;\n  };\n\n  getPointerPos = e => {\n    const rect = this.canvas.interface.getBoundingClientRect();\n\n    // use cursor pos as default\n    let clientX = e.clientX;\n    let clientY = e.clientY;\n\n    // use first touch if available\n    if (e.changedTouches && e.changedTouches.length > 0) {\n      clientX = e.changedTouches[0].clientX;\n      clientY = e.changedTouches[0].clientY;\n    }\n\n    // return mouse/touch position inside canvas\n    return {\n      x: clientX - rect.left,\n      y: clientY - rect.top\n    };\n  };\n\n  handlePointerMove = (x, y) => {\n    if (this.props.disabled) return;\n\n    const hasChanged = this.lazy.update({ x, y });\n    const isDisabled = !this.lazy.isEnabled();\n\n    if (\n      (this.isPressing && hasChanged && !this.isDrawing) ||\n      (isDisabled && this.isPressing)\n    ) {\n      // Start drawing and add point\n      this.isDrawing = true;\n      this.points.push(this.lazy.brush.toObject());\n    }\n\n    if (this.isDrawing && (this.lazy.brushHasMoved() || isDisabled)) {\n      // Add new point\n      this.points.push(this.lazy.brush.toObject());\n\n      // Draw current points\n      this.drawPoints({\n        points: this.points,\n        brushColor: this.props.brushColor,\n        brushRadius: this.props.brushRadius\n      });\n    }\n\n    this.mouseHasMoved = true;\n  };\n\n  drawPoints = ({ points, brushColor, brushRadius }) => {\n    this.ctx.temp.lineJoin = \"round\";\n    this.ctx.temp.lineCap = \"round\";\n    this.ctx.temp.strokeStyle = brushColor;\n\n    this.ctx.temp.clearRect(\n      0,\n      0,\n      this.ctx.temp.canvas.width,\n      this.ctx.temp.canvas.height\n    );\n    this.ctx.temp.lineWidth = brushRadius * 2;\n\n    let p1 = points[0];\n    let p2 = points[1];\n\n    this.ctx.temp.moveTo(p2.x, p2.y);\n    this.ctx.temp.beginPath();\n\n    for (var i = 1, len = points.length; i < len; i++) {\n      // we pick the point between pi+1 & pi+2 as the\n      // end point and p1 as our control point\n      var midPoint = midPointBtw(p1, p2);\n      this.ctx.temp.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\n      p1 = points[i];\n      p2 = points[i + 1];\n    }\n    // Draw last line as a straight line while\n    // we wait for the next point to be able to calculate\n    // the bezier control point\n    this.ctx.temp.lineTo(p1.x, p1.y);\n    this.ctx.temp.stroke();\n  };\n\n  saveLine2 = (data) => {\n    this.isDrawing = false;\n    this.isPressing = false;\n    console.log('data from saveline: ', data)\n    console.log('saveLine2 called')\n    this.lines.push(data);\n    console.log('lines: ', this.lines)\n    this.points.length = 0;\n\n    const width = this.canvas.temp.width;\n    const height = this.canvas.temp.height;\n\n    // Copy the line to the drawing canvas\n    this.ctx.drawing.drawImage(this.canvas.temp, 0, 0, width, height);\n\n    // Clear the temporary line-drawing canvas\n    this.ctx.temp.clearRect(0, 0, width, height);\n  }\n\n  saveLine = ({ brushColor, brushRadius } = {}) => {\n    if (this.points.length < 2) return;\n\n    // Save as new line\n    this.lines.push({\n      points: [...this.points],\n      brushColor: brushColor || this.props.brushColor,\n      brushRadius: brushRadius || this.props.brushRadius\n    });\n\n    // Reset points array\n    this.points.length = 0;\n\n    const width = this.canvas.temp.width;\n    const height = this.canvas.temp.height;\n\n    // Copy the line to the drawing canvas\n    this.ctx.drawing.drawImage(this.canvas.temp, 0, 0, width, height);\n\n    // Clear the temporary line-drawing canvas\n    this.ctx.temp.clearRect(0, 0, width, height);\n  };\n\n  clear = () => {\n    this.lines = [];\n    this.valuesChanged = true;\n    this.ctx.drawing.clearRect(\n      0,\n      0,\n      this.canvas.drawing.width,\n      this.canvas.drawing.height\n    );\n    this.ctx.temp.clearRect(\n      0,\n      0,\n      this.canvas.temp.width,\n      this.canvas.temp.height\n    );\n  };\n\n  loop = ({ once = false } = {}) => {\n    if (this.mouseHasMoved || this.valuesChanged) {\n      const pointer = this.lazy.getPointerCoordinates();\n      const brush = this.lazy.getBrushCoordinates();\n\n      this.drawInterface(this.ctx.interface, pointer, brush);\n      this.mouseHasMoved = false;\n      this.valuesChanged = false;\n    }\n\n    if (!once) {\n      window.requestAnimationFrame(() => {\n        this.loop();\n      });\n    }\n  };\n\n  drawGrid = ctx => {\n    if (this.props.hideGrid) return;\n\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    ctx.beginPath();\n    ctx.setLineDash([5, 1]);\n    ctx.setLineDash([]);\n    ctx.strokeStyle = this.props.gridColor;\n    ctx.lineWidth = 0.5;\n\n    const gridSize = 25;\n\n    let countX = 0;\n    while (countX < ctx.canvas.width) {\n      countX += gridSize;\n      ctx.moveTo(countX, 0);\n      ctx.lineTo(countX, ctx.canvas.height);\n    }\n    ctx.stroke();\n\n    let countY = 0;\n    while (countY < ctx.canvas.height) {\n      countY += gridSize;\n      ctx.moveTo(0, countY);\n      ctx.lineTo(ctx.canvas.width, countY);\n    }\n    ctx.stroke();\n  };\n\n  drawInterface = (ctx, pointer, brush) => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    // Draw brush preview\n    ctx.beginPath();\n    ctx.fillStyle = this.props.brushColor;\n    ctx.arc(brush.x, brush.y, this.props.brushRadius, 0, Math.PI * 2, true);\n    ctx.fill();\n\n    // Draw mouse point (the one directly at the cursor)\n    ctx.beginPath();\n    ctx.fillStyle = this.props.catenaryColor;\n    ctx.arc(pointer.x, pointer.y, 4, 0, Math.PI * 2, true);\n    ctx.fill();\n\n    // Draw catenary\n    if (this.lazy.isEnabled()) {\n      ctx.beginPath();\n      ctx.lineWidth = 2;\n      ctx.lineCap = \"round\";\n      ctx.setLineDash([2, 4]);\n      ctx.strokeStyle = this.props.catenaryColor;\n      this.catenary.drawToCanvas(\n        this.ctx.interface,\n        brush,\n        pointer,\n        this.chainLength\n      );\n      ctx.stroke();\n    }\n\n    // Draw brush point (the one in the middle of the brush preview)\n    ctx.beginPath();\n    ctx.fillStyle = this.props.catenaryColor;\n    ctx.arc(brush.x, brush.y, 2, 0, Math.PI * 2, true);\n    ctx.fill();\n  };\n\n  render() {\n    return (\n      <div\n        className={this.props.className}\n        style={{\n          display: \"block\",\n          background: \"#fff\",\n          touchAction: \"none\",\n          width: this.props.canvasWidth,\n          height: this.props.canvasHeight,\n          ...this.props.style\n        }}\n        ref={container => {\n          if (container) {\n            this.canvasContainer = container;\n          }\n        }}\n      >\n        {canvasTypes.map(({ name, zIndex }) => {\n          const isInterface = name === \"interface\";\n          return (\n            <canvas\n              key={name}\n              ref={canvas => {\n                if (canvas) {\n                  this.canvas[name] = canvas;\n                  this.ctx[name] = canvas.getContext(\"2d\");\n                }\n              }}\n              style={{ ...canvasStyle, zIndex }}\n              onMouseDown={isInterface ? this.handleMouseDown : undefined}\n              onMouseMove={isInterface ? this.handleMouseMove : undefined}\n              onMouseUp={isInterface ? this.handleMouseUp : undefined}\n              onMouseOut={isInterface ? this.handleMouseUp : undefined}\n              onTouchStart={isInterface ? this.handleTouchStart : undefined}\n              onTouchMove={isInterface ? this.handleTouchMove : undefined}\n              onTouchEnd={isInterface ? this.handleTouchEnd : undefined}\n              onTouchCancel={isInterface ? this.handleTouchEnd : undefined}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n","/** \n * Original from: https://stackoverflow.com/questions/21961839/simulation-background-size-cover-in-canvas\n * Original By Ken Fyrstenberg Nilsen\n * \n * Note: img must be fully loaded or have correct width & height set.\n */\nexport default function drawImageProp({ctx, img, x, y, w, h, offsetX, offsetY} = {}) {\n  // Defaults\n  if (typeof x !== \"number\") x = 0;\n  if (typeof y !== \"number\") y = 0;\n  if (typeof w !== \"number\") w = ctx.canvas.width;\n  if (typeof h !== \"number\") h = ctx.canvas.height;\n  if (typeof offsetX !== \"number\") offsetX = 0.5;\n  if (typeof offsetY !== \"number\") offsetY = 0.5;\n\n  // keep bounds [0.0, 1.0]\n  if (offsetX < 0) offsetX = 0;\n  if (offsetY < 0) offsetY = 0;\n  if (offsetX > 1) offsetX = 1;\n  if (offsetY > 1) offsetY = 1;\n\n  var iw = img.width,\n    ih = img.height,\n    r = Math.min(w / iw, h / ih),\n    nw = iw * r, // new prop. width\n    nh = ih * r, // new prop. height\n    cx,\n    cy,\n    cw,\n    ch,\n    ar = 1;\n\n  // decide which gap to fill\n  if (nw < w) ar = w / nw;\n  if (Math.abs(ar - 1) < 1e-14 && nh < h) ar = h / nh; // updated\n  nw *= ar;\n  nh *= ar;\n\n  // calc source rectangle\n  cw = iw / (nw / w);\n  ch = ih / (nh / h);\n\n  cx = (iw - cw) * offsetX;\n  cy = (ih - ch) * offsetY;\n\n  // make sure source rectangle is valid\n  if (cx < 0) cx = 0;\n  if (cy < 0) cy = 0;\n  if (cw > iw) cw = iw;\n  if (ch > ih) ch = ih;\n\n  // fill image in dest. rectangle\n  ctx.drawImage(img, cx, cy, cw, ch, x, y, w, h);\n}\n","// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const createCanvas = `mutation CreateCanvas($input: CreateCanvasInput!) {\n  createCanvas(input: $input) {\n    id\n    clientId\n    data\n  }\n}\n`;\nexport const updateCanvas = `mutation UpdateCanvas($input: UpdateCanvasInput!) {\n  updateCanvas(input: $input) {\n    id\n    clientId\n    data\n  }\n}\n`;\nexport const deleteCanvas = `mutation DeleteCanvas($input: DeleteCanvasInput!) {\n  deleteCanvas(input: $input) {\n    id\n    clientId\n    data\n  }\n}\n`;\n","import React, { Component } from \"react\";\n\nimport CanvasDraw from \"./RCD\";\nimport uuid from 'uuid/v4'\n\nimport { API, graphqlOperation } from 'aws-amplify'\nimport { onUpdateCanvas } from './graphql/subscriptions'\nimport { updateCanvas, createCanvas } from './graphql/mutations'\n\nconst colors = [\n  '#D50000',\n  '#AA00FF',\n  '#2962FF',\n  '#18FFFF',\n  '#00C853',\n  '#FFD600',\n  '#FF6D00',\n  '#000000'\n]\n\nfunction rand() {\n  return colors[~~(colors.length * Math.random())];\n}\n\nclass Demo extends Component {\n  state = {\n    brushColor: rand(),\n    canvasHeight: 350,\n    canvasWidth: 380,\n    brushRadius: 4,\n    lazyRadius: 8\n  }\n  lineLength = 0\n  id = '123'\n  clientId = uuid()\n  canvasInfo = 'tempcanvas'\n  componentDidMount() {\n    const canvas = {\n      id: this.id,\n      clientId: this.clientId,\n      data: {\n        ...this.state,\n        lines: []\n      }\n    }\n    // Create the canvas. If canvas is already created, retrieve the data & draw previous canvas\n    API.graphql(graphqlOperation(createCanvas, { input: canvas }))\n      .then(d => console.log('canvas created :', d))\n      .catch(err => {\n        if (err.errors[0].data.id === this.id) {\n          const d = err.errors[0].data.data\n          this.canvas.loadSaveData(d)\n        }\n      })\n    window.addEventListener('mouseup', (e) => {\n      // If we are clicking on a button, do not update anything\n      if (e.target.name === 'clearbutton') return\n      this.setState({\n        brushColor: rand()\n      })\n      const data = this.canvas.getSaveData()\n      const p = JSON.parse(data)\n      const length = p.lines.length\n      this.lineLength = length\n\n      const canvas = {\n        id: this.id,\n        clientId: this.clientId,\n        data\n      }\n      // Save updated canvas in the database\n      API.graphql(graphqlOperation(updateCanvas, { input: canvas }))\n        .then(c => {\n          console.log('canvas updated!')\n        })\n        .catch(err => console.log('error creating: ', err))\n    })\n    API.graphql(graphqlOperation(onUpdateCanvas))\n      .subscribe({\n        next: (d) => {\n          const data = JSON.parse(d.value.data.onUpdateCanvas.data)\n          console.log(data);\n          const length = data.lines.length\n          if (length === 0) {\n            // If there is no canvas data, clear the canvas\n            const data = this.canvas.getSaveData()\n            const parsedData = JSON.parse(data)\n            const newData = {\n              ...parsedData,\n              lines: []\n            }\n            const newCanvas = JSON.stringify(newData)\n            this.canvas.loadSaveData(newCanvas)\n            return\n          }\n          if (this.lineLength === length || length === Number(0)) return\n          // Draw new lines to canvas\n          const last = data.lines[length -1]\n          this.canvas.simulateDrawingLines({ lines: [last] })\n        }\n      })\n  }\n  clear = () => {\n    const data = this.canvas.getSaveData()\n    const parsedData = JSON.parse(data)\n    const newData = {\n      ...parsedData,\n      lines: []\n    }\n    const newCanvas = JSON.stringify(newData)\n    this.canvas.loadSaveData(newCanvas)\n    const canvas = {\n      id: this.id,\n      clientId: this.clientId,\n      data: newCanvas\n    }\n    API.graphql(graphqlOperation(updateCanvas, { input: canvas }))\n        .then(c => {\n          console.log('canvas cleared!')\n        })\n        .catch(err => console.log('error creating: ', err))\n  }\n  render() {\n    return (\n      <div>\n        <button name='clearbutton' onClick={this.clear}>Clear</button>\n        <CanvasDraw\n          {...this.state}\n          ref={canvas => this.canvas = canvas}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Demo","// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const onCreateCanvas = `subscription OnCreateCanvas {\n  onCreateCanvas {\n    id\n    clientId\n    data\n  }\n}\n`;\nexport const onUpdateCanvas = `subscription OnUpdateCanvas {\n  onUpdateCanvas {\n    id\n    clientId\n    data\n  }\n}\n`;\nexport const onDeleteCanvas = `subscription OnDeleteCanvas {\n  onDeleteCanvas {\n    id\n    clientId\n    data\n  }\n}\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"ap-northeast-1\",\n    \"aws_appsync_graphqlEndpoint\": \"https://k75vqhktsfayva5hcffm6omcfm.appsync-api.ap-northeast-1.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"ap-northeast-1\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-ws6gnvutgvgnxibl2uone3yfbu\"\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Canvas from './Canvas';\nimport * as serviceWorker from './serviceWorker';\n\nimport Amplify from 'aws-amplify'\nimport config from './aws-exports'\nAmplify.configure(config)\n\nReactDOM.render(<Canvas />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}